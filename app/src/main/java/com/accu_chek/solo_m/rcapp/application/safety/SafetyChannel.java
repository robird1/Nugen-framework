/**
 * ===========================================================================
 * Copyright 2013 Roche Diagnostics GmbH
 * All Rights Reserved
 * ===========================================================================
 *
 * Class name: SafetyChannel
 * Brief:
 *
 * Create Date: 11/13/2015
 * $Revision: 24192 $
 * $Author: StanleySu $
 * $Id: SafetyChannel.java 24192 2015-11-16 09:57:25Z StanleySu $
 */

package com.accu_chek.solo_m.rcapp.application.safety;

import com.accu_chek.solo_m.rcapp.application.exception.DataIntegrityException;

import java.io.Serializable;

public class SafetyChannel<T extends Number> implements Serializable,
        ISafetyEquals<T, T>
{

    // serial version id
    // This ID is generated by Android. DON't change to upper case
    private static final long serialVersionUID = -7559608581335441720L;

    // channel1 value
    private T mValue1 = null;

    // channel2 value
    private T mValue2 = null;

    /**
     * The default constructors. The variable that initialed by this
     * constructors must call set() function before call get function.
     */
    public SafetyChannel()
    {
        // Do nothing for the no argument constructor
    }

    /**
     * Constructs a new SafetyChannel with original data and diverse data of
     * Number type T. It will call set function to set the original value and
     * diverse value.
     * 
     * @param original [in] the original data
     * @param diverse [in] the diverse data (must be the negative value of
     *            original data)
     */
    public SafetyChannel(final T value1, final T value2)
    {
        set(value1, value2);
    }


    /**
     * Return the original value without the safety comparison.
     * 
     * @return T [out] the original data type value
     */
    public final T getValueCH1()
    {
        final SafetyBoolean isEquals = safetyEquals(mValue1, mValue2);

        if (isEquals.getByte() == SafetyBoolean.FALSE.getByte())
        {
            throw new DataIntegrityException();
        }

        return mValue1;
    }

    /**
     * Return the diverse value without the safety comparison.
     * 
     * @return D [out] the diverse data type value
     */
    public final T getValueCH2()
    {
        final SafetyBoolean isEquals = safetyEquals(mValue1, mValue2);

        if (isEquals.getByte() == SafetyBoolean.FALSE.getByte())
        {
            throw new DataIntegrityException();
        }

        return mValue2;
    }

    /**
     * Set the original data and diverse data and check the integrity of
     * original data by safetyEquals() function. Throw DataIntegrityException if
     * check result of safetyEquals() is SafetyBoolean.FALSE.
     * 
     * @param original [in] the original data
     * @param diverse [in] the diverse data (must be the negative value of
     *            original data)
     * @return void [out]
     */
    public final void set(final T value1, final T value2)
    {
        mValue1 = value1;
        mValue2 = value2;

        // check data integrity
        final SafetyBoolean isEquals = safetyEquals(mValue1, mValue2);
        
        if (isEquals.getByte() == SafetyBoolean.FALSE.getByte())
        {
            throw new DataIntegrityException();
        }
    }

    /**
     * Return SafetyBoolean.TRUE if the original data value is equals to the
     * negative value of diverse data. Otherwise return SafetyBoolean.FALSE.
     * 
     * @param original [in] the original data
     * @param diverse [in] the diverse data
     * @return SafetyBoolean [out] true if the value of original data is equals
     *         to the negative value of diverse data.
     */
    @Override
    public final SafetyBoolean safetyEquals(final T original, final T diverse)
    {
        SafetyBoolean isResultOK = SafetyBoolean.FALSE;

        if ((original != null) && (diverse != null))
        {
            isResultOK = SafetyCoding.compareTwoChannel(mValue1.longValue(), mValue2.longValue());
        }

        return isResultOK;
    }
}

/*
 * ===========================================================================
 *
 * Revision history
 *  
 * ===========================================================================
 */