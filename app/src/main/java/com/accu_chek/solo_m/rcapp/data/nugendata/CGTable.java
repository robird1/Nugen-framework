package com.accu_chek.solo_m.rcapp.data.nugendata;

import java.util.ArrayList;

import android.content.ContentValues;
import android.database.Cursor;
import android.net.Uri;

import com.accu_chek.solo_m.rcapp.application.safety.SafetyChannel;
import com.accu_chek.solo_m.rcapp.application.util.CommonUtils;
import com.accu_chek.solo_m.rcapp.application.util.Debug;
import com.accu_chek.solo_m.rcapp.data.operationhandler.AbstractTable;
import com.accu_chek.solo_m.rcapp.data.operationhandler.IDBData;

public class CGTable extends AbstractTable
{
    // Table column name. This column value will be generated automatically by
    // Android.
    public static final String COLUMN_CG_ID = "cg_id";
    
    // Table column name. This column value must not be null when inserting or
    // an SQLiteException will occur.
    public static final String COLUMN_TIMESTAMP = "timestamp";

    // Table column name. This column value must not be null when inserting or
    // an SQLiteException will occur.
    public static final String COLUMN_TIMESTAMP_DB = "timestamp_db";
    
    // Table column name. This column value must not be null when inserting or
    // an SQLiteException will occur.
    public static final String COLUMN_CG_RESULT = "cg_result";
    
    // Table column name. This column value must not be null when inserting or
    // an SQLiteException will occur.
    public static final String COLUMN_SEGMENT_ID = "segment_id";
    
    // The ID of the current queried record generated by Android.
    private int mRecordId = -1;
    
    // Table column value encoded in JSON string type.
    private String mTimestamp = EMPTY_COLUMN_VALUE;
    
    // Table column value encoded in JSON string type.
    private String mCgResult = EMPTY_COLUMN_VALUE;
    
    // Table column value encoded in JSON string type.
    private String mSegmentId = EMPTY_COLUMN_VALUE;
    
    /**
     * Obtain column value.
     * 
     * @return Returns an object which stores the values of channel 1 and
     *         channel 2.
     *         Range: valid object
     *         Unit: SafetyChannel
     *         Scaling: 1
     * 
     * @see mRecordId: Use this global variable for storing column value.
     * 
     */
    public SafetyChannel<Integer> getRecordId()
    {
        SafetyChannel<Integer> channel = CommonUtils
                .getSafetyChannel(mRecordId);
        
        return channel;
    }

    /**
     * Obtain column value.
     * 
     * @return Returns an object which stores the values of channel 1 and
     *         channel 2.
     *         Range: valid object
     *         Unit: SafetyChannel
     *         Scaling: 1
     * 
     * @see mTimestamp: Use this global variable for storing column value.
     * 
     */
    public SafetyChannel<Long> getTimestamp()
    {
        SafetyChannel<Long> channel = null;

        if (!EMPTY_COLUMN_VALUE.equals(mTimestamp))
        {
            long[] channelValue = DatabaseUtil
                    .restoreChannelLongValue(mTimestamp);
            channel = new SafetyChannel<Long>(channelValue[0], channelValue[1]);
        }

        return channel;
    }
    
    /**
     * Obtain column value.
     * 
     * @return Returns an object which stores the values of channel 1 and
     *         channel 2.
     *         Range: valid object
     *         Unit: SafetyChannel
     *         Scaling: 1
     * 
     * @see mCgResult: Use this global variable for storing column value.
     * 
     */
    public SafetyChannel<Integer> getCgResult()
    {
        SafetyChannel<Integer> channel = null;

        if (!EMPTY_COLUMN_VALUE.equals(mCgResult))
        {
            int[] channelValue = DatabaseUtil.restoreChannelIntValue(mCgResult);
            channel = new SafetyChannel<Integer>(channelValue[0],
                    channelValue[1]);
        }

        return channel;
    }
    
    /**
     * Obtain column value.
     * 
     * @return Returns an object which stores the values of channel 1 and
     *         channel 2.
     *         Range: valid object
     *         Unit: SafetyChannel
     *         Scaling: 1
     * 
     * @see mSegmentId: Use this global variable for storing column value.
     * 
     */
    public SafetyChannel<Integer> getSegmentId()
    {
        SafetyChannel<Integer> channel = null;

        if (!EMPTY_COLUMN_VALUE.equals(mSegmentId))
        {
            int[] channelValue = DatabaseUtil
                    .restoreChannelIntValue(mSegmentId);
            channel = new SafetyChannel<Integer>(channelValue[0],
                    channelValue[1]);
        }

        return channel;
    }

    /**
     * Obtain table column values from the control test result to initialize the
     * global variables for database operation (the insert or update operation).
     * 
     * @param values : the values from the control test result by the insert or
     *            update operation
     *            Range: valid object
     *            Unit: ContentValues
     *            Scaling: 1
     * 
     * @return None
     * 
     * @see mCgResult: Use this global variable for storing column value.
     * @see mTimestamp: Use this global variable for storing column value.
     * @see mSegmentId: Use this global variable for storing column value.
     */
    @Override
    protected void getDataFromContentValue(ContentValues values)
    {
        CommonUtils.objectCheck(values);
        
        mCgResult = DatabaseUtil.getStringValue(values, COLUMN_CG_RESULT,
                mCgResult);
        mTimestamp = DatabaseUtil.getStringValue(values, COLUMN_TIMESTAMP,
                mTimestamp);
        mSegmentId = DatabaseUtil.getStringValue(values, COLUMN_SEGMENT_ID,
                mSegmentId);

    }

    /**
     * Generate record CRC value according to the values of record data.
     * 
     * @return the generated CRC value
     *            Range: -2^31 to (2^31)-1
     *            Unit: int
     *            Scaling: 1
     * 
     * @see mCgResult: Use this global variable for storing column value.
     * @see mTimestamp: Use this global variable for storing column value.
     * @see mSegmentId: Use this global variable for storing column value.
     */
    @Override
    public int generateCRC()
    {
        int nCRC = -1;
        ArrayList<String> list = new ArrayList<String>();

        list.add(mTimestamp);
        list.add(mCgResult);
        list.add(mSegmentId);
        
        nCRC = DatabaseUtil.generateCRC(list);
        Debug.printI("QueryCommand", "genCRC() in CGTable. nCRC: "+ nCRC);

        return nCRC;
    }

    /**
     * Invoke this method to obtain the URI path of a certain table.
     * 
     * @return the URI reference of a certain table
     *            Range: valid object
     *            Unit: Uri
     *            Scaling: 1
     */
    @Override
    public Uri onUri()
    {
        return UrlType.cgUri;
    }

    /**
     * Obtain the query record by cursor.
     * 
     * @param cursor : position to the entry of database table
     *            Range: valid object
     *            Unit: Cursor
     *            Scaling: 1
     * 
     * @return the query record
     *         Range: valid object
     *         Unit: IDBData
     *         Scaling: 1
     * 
     * @see mCgResult: Use this global variable for storing column value.
     * @see mTimestamp: Use this global variable for storing column value.
     * @see mSegmentId: Use this global variable for storing column value.
     * @see mCRC: Use this global variable for storing calculated CRC value.
     */
    @Override
    public IDBData onQueryDataFromCursor(Cursor cursor)
    {
        CGTable model = null;
        
        CommonUtils.objectCheck(cursor);

        int recordIdIndex = cursor.getColumnIndex(COLUMN_CG_ID);
        int cgResultIndex = cursor.getColumnIndex(COLUMN_CG_RESULT);
        int timestampIndex = cursor.getColumnIndex(COLUMN_TIMESTAMP);
        int segmentidIndex = cursor.getColumnIndex(COLUMN_SEGMENT_ID);
        int crcIndex = cursor.getColumnIndex(COLUMN_CRC);

        model = new CGTable();

        model.mRecordId = cursor.getInt(recordIdIndex);
        model.mCgResult = DatabaseUtil.getStringValue(cursor, cgResultIndex);
        model.mTimestamp = DatabaseUtil.getStringValue(cursor, timestampIndex);
        model.mSegmentId = DatabaseUtil.getStringValue(cursor, segmentidIndex);
        model.setCRC(DatabaseUtil.getIntValue(cursor, crcIndex));
        
        return model;
    }

    /**
     * Obtain the primary key name of a certain table for the update operation.
     * 
     * @return the primary key name of certain table
     *         Range: valid object
     *         Unit: String
     *         Scaling: 1
     */
    @Override
    public String getPrimaryKeyName()
    {
        return CGTable.COLUMN_CG_ID;
    }

    /**
     * Obtain the name of a certain table for the database operation.
     * 
     * @return the name of a certain table
     *         Range: valid object
     *         Unit: String
     *         Scaling: 1
     */
    @Override
    protected String getTableName()
    {
        return DBHelper.CG_TABLE;
    }
    
}
