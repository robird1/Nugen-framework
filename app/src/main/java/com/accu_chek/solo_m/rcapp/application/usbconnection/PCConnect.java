/**
 * ===========================================================================
 * Copyright 2015 Roche Diagnostics GmbH
 * All Rights Reserved
 * ===========================================================================
 * 
 * Class name: PCConnect
 * Brief: Class for handle the USB configuration and property
 * 
 * Create Date: 04/29/2015
 * $Revision: 21881 $
 * $Author: ivanhuang $
 * $Id: PCConnect.java 21881 2015-10-19 05:24:51Z ivanhuang $
 */

package com.accu_chek.solo_m.rcapp.application.usbconnection;

import android.os.RemoteException;

import com.accu_chek.solo_m.rcapp.application.CustJavaFrameworkManager;
import com.accu_chek.solo_m.rcapp.application.emwrservice.EMWRList;
import com.accu_chek.solo_m.rcapp.application.emwrservice.NotifyMessage;
import com.accu_chek.solo_m.rcapp.application.emwrservice.NotifyProxy;
import com.accu_chek.solo_m.rcapp.application.util.CommonUtils;
import com.accu_chek.solo_m.rcapp.application.util.IRCSystemPeoperty;

public class PCConnect extends IPCConnect.Stub
{
    /**
     * Key of the android system property "persist.sys.usb.config"
     * Range: "persist.sys.usb.config"
     * Unit: String
     * Scaling: 1
     */
    private static final String USBCONFIGPROP = "persist.sys.usb.config";

    /**
     * Key of the android system property "persist.sys.default.pcconnect"
     * Range: "persist.sys.usb.config"
     * Unit: String
     * Scaling: 1
     */
    private static final String USBCONFIGDEFAULTROP = "persist.sys.default.pcconnect";

    /**
     * PHDC mode value for the android system property "persist.sys.default.pcconnect"
     * Range: "phdc,adb"
     * Unit: String
     * Scaling: 1
     */
    private static final String PHDC_ADB_PROPERTY_VALUE = "phdc,adb";

    /**
     * Default value of the android system property "persist.sys.usb.config"
     * Range: Valid value of the android system key "persist.sys.usb.config" (ex: "mass_storage,adb")
     * Unit: String
     * Scaling: 1
     */
    private static String mDefaultConfig = "";

    /**
     * Default constructor of PCConnect.class
     * 
     */
    public PCConnect()
    {
        // Constructor
    }

    /**
     * Status: FDD/Coding/UT Done
     * 
     * Input listener is not null: Register the USB listener
     * 
     * Input listener is null: Unregister the USB listener
     * 
     * return None
     * 
     * @param listener: Input listener
     *            Range: Null or valid object
     *            Unit: IUsbListener
     *            Scaling: 1
     * @throws RemoteException: Automatically generated by IPCConnect.aidl
     */
    @Override
    public void setOnUsbListener(IUsbListener listener) throws RemoteException
    {
        ConnectUtil.INSTANCE.setUsbListener(listener);
    }

    /**
     * Status: FDD/Coding/UT Done
     * 
     * Sets the meter to PHDC mode:
     * Sets the android system property "persist.sys.usb.config" to "phdc,adb".
     * 
     * return None
     */
    public static void setPhdcUsbConfig()
    {

        IRCSystemPeoperty bpSetProperty = CustJavaFrameworkManager.getRCSystemPropertyService(null);

        // Null Object Check
        CommonUtils.objectCheck(bpSetProperty);

        try
        {
            bpSetProperty.setProperty(USBCONFIGPROP, PHDC_ADB_PROPERTY_VALUE);
        }
        catch (RemoteException e)
        {
            errorHandler();
        }
        finally
        {
            // Apply to the coding standard
        }
    }

    /**
     * Status: FDD/Coding/UT Done
     * 
     * Gets the current USB configuration:
     * Gets the android system property value of "persist.sys.usb.config"
     * 
     * return String [out]: The property value of "persist.sys.usb.config"
     * Range: Valid String
     * Unit: String
     * Scaling: 1
     */
    public static String getUsbConfig()
    {
        IRCSystemPeoperty bpSetProperty = CustJavaFrameworkManager.getRCSystemPropertyService(null);

        String val = "";

        // Null Object Check
        CommonUtils.objectCheck(bpSetProperty);

        try
        {
            val = bpSetProperty.getProperty(USBCONFIGPROP, "");
        }
        catch (RemoteException e)
        {
            errorHandler();
        }
        finally
        {
            // Apply to the coding standard
        }

        return val;
    }

    /**
     * Status: FDD/Coding/UT Done
     * 
     * Save the default USB configuration:
     * Save the android system property value of "persist.sys.usb.config".
     * 
     * return None
     */
    public static void saveDefaultUsbConfig()
    {
        IRCSystemPeoperty bpSetProperty = CustJavaFrameworkManager.getRCSystemPropertyService(null);

        // Null Object Check
        CommonUtils.objectCheck(bpSetProperty);

        try
        {
            mDefaultConfig = bpSetProperty.getProperty(USBCONFIGPROP, "");

            bpSetProperty.setProperty(USBCONFIGDEFAULTROP, mDefaultConfig);
        }
        catch (RemoteException e)
        {
            errorHandler();
        }
        finally
        {
            // Apply to the coding standard
        }
    }

    /**
     * Status: FDD/Coding/UT Done
     * 
     * Restore the default USB configuration:
     * Gets the saved android system property value of "persist.sys.default.pcconnect"
     * and then restore it.
     * 
     * return None
     */
    public static void restoreUsbConfig()
    {
        IRCSystemPeoperty bpSetProperty = CustJavaFrameworkManager.getRCSystemPropertyService(null);

        // Null Object Check
        CommonUtils.objectCheck(bpSetProperty);

        try
        {
            mDefaultConfig = bpSetProperty.getProperty(USBCONFIGDEFAULTROP, "");

            bpSetProperty.setProperty(USBCONFIGPROP, mDefaultConfig);
        }
        catch (RemoteException e)
        {
            errorHandler();
        }
        finally
        {
            // Apply to the coding standard
        }
    }

    /**
     * Status: FDD/Coding/UT Done
     * 
     * Error Handler for PCConnect
     * 
     * return None
     */
    protected static void errorHandler()
    {
        /**
         *  Show EMWR: EMW46601
         */
        NotifyMessage message = new NotifyMessage(EMWRList.EMW46601);

        NotifyProxy.showEMWR(message);
    }

}

/* ===========================================================================
 * 
 * Revision history
 * 
 * =========================================================================== */
// [NSIQ-20] (1) Refine USB Connection code (2) Add Auto_Header_Footer_Updater
// (R15068 2015-08-20 01:47:57 IvanHuang)
// ----------------------------------------------------------------------------
// [NSIQ-20] Remove the input argument "context" from
// "CustJavaFrameworkManager.getPCConnectService()".
// (R15124 2015-08-20 22:15:04 IvanHuang)
// ----------------------------------------------------------------------------
// [NSIQ-20] Add Error Handler
// (R15158 2015-08-21 04:13:01 IvanHuang)
// ----------------------------------------------------------------------------
// [NSIQ-20] Remove the input argument "context" from "PCConnect()".
// (R15166 2015-08-21 04:32:20 IvanHuang)
// ----------------------------------------------------------------------------
// [NSIQ-20] Modify comment
// (R15169 2015-08-21 04:57:08 IvanHuang)
// ----------------------------------------------------------------------------
// [NSIQ-20] Remove unused import.
// (R15173 2015-08-21 05:24:27 IvanHuang)
// ----------------------------------------------------------------------------
// [NSIQ-20] Refine Code and Comment.
// (R15341 2015-08-24 21:31:21 IvanHuang)
// ----------------------------------------------------------------------------
// 1. Move loadSound() & playSound() to CommonUtils.java
// 2. Add errorHandler() to CommonUtils.java
// (R15468 2015-08-25 23:43:06 IvanHuang)
// ----------------------------------------------------------------------------
// [NSIQ-20] Update Comment.
// (R15747 2015-08-28 08:08:51 IvanHuang)
// ----------------------------------------------------------------------------
// [NSIQ-20] Update Comment.
// (R15767 2015-08-30 22:32:59 IvanHuang)
// ----------------------------------------------------------------------------
// [NSIQ-20] Change defaultConfig to mDefaultConfig.
// (R15891 2015-08-31 08:08:49 IvanHuang)
// ----------------------------------------------------------------------------
// [NSIQ-20] Update comment for the feedback from Technical Write Service.
// (R16684 2015-09-08 05:57:17 IvanHuang)
// ----------------------------------------------------------------------------
// [NSIQ-20] Fix typo in reversion history. (NISQ -> NSIQ)
// (R16747 2015-09-08 22:45:45 IvanHuang)
// ----------------------------------------------------------------------------
// [NSM-2765] Refine comments.
