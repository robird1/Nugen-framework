/**
 * ===========================================================================
 * Copyright 2013 Roche Diagnostics GmbH
 * All Rights Reserved
 * ===========================================================================
 *
 * Class name: com.accu_chek.cgmapp.application.safety.SafetyNumber
 * Brief: The class to keep the number type data by diverse way. when get()
 * function called, it will return the kept original type data if the value of
 * original data is equals to the negative value of diverse data. If two number
 * values are not equal, it will throw DataIntegrityException.
 *
 * Create Date: 1/6/2014
 * $Revision: 24203 $
 * $Author: StanleySu $
 * $Id: SafetyNumber.java 24203 2015-11-16 10:22:33Z StanleySu $
 */

package com.accu_chek.solo_m.rcapp.application.safety;

import android.os.Parcel;
import android.os.Parcelable;

import com.accu_chek.solo_m.rcapp.application.exception.DataIntegrityException;

import java.io.Serializable;

public class SafetyNumber<T extends Number> implements Serializable, Parcelable, 
        ISafetyEquals<T, T>
{

    public static final Creator<SafetyNumber> CREATOR = new Parcelable.Creator<SafetyNumber>()
    {
        /**
        * Read the serialized concrete strategy from the parcel.
        * @param in The parcel to read from
        * @return An SafetyNumber
        */
        public SafetyNumber createFromParcel(final Parcel in) 
        {
            // Read serialized concrete strategy from parcel
            return (SafetyNumber) in.readSerializable();
        }

        /**
         * Required by Creator
         */
        public SafetyNumber[] newArray(final int size) 
        {
            return new SafetyNumber[size];
        }
    };

    // serial version id
    // This ID is generated by Android. DON't change to upper case
    private static final long serialVersionUID = -7559608581335441720L;

    // original type value
    private T mOriginal = null;

    // diverse type value
    private T mDiverse = null;

    /**
     * The default constructors. The variable that initialed by this
     * constructors must call set() function before call get function.
     */
    public SafetyNumber()
    {
        // Do nothing for the no argument constructor
    }

    /**
     * Constructs a new SafetyNumber with original data and diverse data of
     * Number type T. It will call set function to set the original value and
     * diverse value.
     * 
     * @param original [in] the original data
     * @param diverse [in] the diverse data (must be the negative value of
     *            original data)
     */
    public SafetyNumber(final T original, final T diverse)
    {
        set(original, diverse);
    }

    /**
     * Check the data integrity of original data by safetyEquals() function and
     * return the original data if the check result is SafetyBoolean.TRUE,
     * otherwise throw DataIntegrityException.
     * 
     * @return T [out] the original data type value
     */
    public final T get()
    {
        final T result = mOriginal;
        final SafetyBoolean isEquals = safetyEquals(result, mDiverse);

        if (isEquals.getByte() == SafetyBoolean.FALSE.getByte())
        {
            throw new DataIntegrityException();
        }

        return result;
    }

    /**
     * Return the original value without the safety comparison.
     * 
     * @return T [out] the original data type value
     */
    public final T getOriginal()
    {
        return mOriginal;
    }

    /**
     * Return the diverse value without the safety comparison.
     * 
     * @return D [out] the diverse data type value
     */
    public final T getDiverse()
    {
        return mDiverse;
    }

    /**
     * Set the original data and diverse data and check the integrity of
     * original data by safetyEquals() function. Throw DataIntegrityException if
     * check result of safetyEquals() is SafetyBoolean.FALSE.
     * 
     * @param original [in] the original data
     * @param diverse [in] the diverse data (must be the negative value of
     *            original data)
     * @return void [out]
     */
    public final void set(final T original, final T diverse)
    {
        mOriginal = original;
        mDiverse = diverse;

        // check data integrity
        final SafetyBoolean isEquals = safetyEquals(mOriginal, mDiverse);
        
        if (isEquals.getByte() == SafetyBoolean.FALSE.getByte())
        {
            throw new DataIntegrityException();
        }
    }

    /**
     * Return SafetyBoolean.TRUE if the original data value is equals to the
     * negative value of diverse data. Otherwise return SafetyBoolean.FALSE.
     * 
     * @param original [in] the original data
     * @param diverse [in] the diverse data
     * @return SafetyBoolean [out] true if the value of original data is equals
     *         to the negative value of diverse data.
     */
    @Override
    public final SafetyBoolean safetyEquals(final T original, final T diverse)
    {
        SafetyBoolean isResultOK = SafetyBoolean.FALSE;

        if ((original != null) && (diverse != null))
        {
            if (original.longValue() == -diverse.longValue())
            {
                isResultOK = SafetyBoolean.TRUE;
            }
        }

        return isResultOK;
    }
    
    /**
     * "It is used for for some validation code -- in particular to implement Bundle.hasFileDescriptors()"
     * (Dianne Hackborn -- Android framework engineer)
     * Not implemented in SoloM_RCAPP.
     */
    public final int describeContents()
    {
        return 0;
    }
    
    /**
     * Flatten this object in to a Parcel.
     * 
     * @param dest The Parcel in which the object should be written.
     * @param flags Additional flags about how the object should be written. May
     *            be 0 or PARCELABLE_WRITE_RETURN_VALUE.
     */
    @Override
    public final void writeToParcel(final Parcel dest, final int flags)
    {
        dest.writeSerializable(this);
    }
}

/*
 * ===========================================================================
 * 
 * Revision history
 * 
 * ===========================================================================
 */
// add comments
// (3338 2014-01-06 06:57:09Z PhoenixCheng)
// ----------------------------------------------------------------------------
// Restore the sources to revision 3682.
// (3700 2014-01-22 08:38:45Z HenryTso)
// ----------------------------------------------------------------------------
// [JIRA-ID]: ATOS-267
// [Comment]: comply coding guideline
// (5609 2014-03-10 02:08:06Z PhoenixCheng)
// ----------------------------------------------------------------------------
// [JIRA-ID]: ATOS-267
// [Comment]: add getOriginal and getDiverse function
// (10095 2014-05-23 10:29:36Z PhoenixCheng)
// ----------------------------------------------------------------------------
// [JIRA-ID]: ATOS-267
// [Comment]: comply coding guideline
// (10801 2014-06-09 09:54:09Z PhoenixCheng)
// ----------------------------------------------------------------------------
// [JIRA-ID]: ATOS-555
// [Comment]: Implements the Fix Point method to replace the floating point
// calculation and Safety for the bG, Insulin, Carbs data processing.
// (10890 2014-06-10 12:41:03Z HenryTso)
// ----------------------------------------------------------------------------
// [JIRA-ID]:ATOS-267
// [Comment]:coding guideline
// (18669 2014-09-11 06:37:42Z SteveSu)
// ----------------------------------------------------------------------------
// [JIRA-ID]: N/A
// [Comment]: Undone KEYWORD function of SVN. No Source code content will be
// changed
// (18669 2014-09-11 06:37:42Z SteveSu)
// ----------------------------------------------------------------------------
// [JIRA-ID]: N/A
// [Comment]: Preform KEYWORD function of SVN for each source files. No Source
// code content will be changed
// (21021 2014-10-03 02:34:45Z HenryTso)
// ----------------------------------------------------------------------------
// [JIRA-ID]: ATOS-267
// [Comment]: Comply coding guideline
// (21467 2014-10-07 14:22:36Z HenryTso)
// ----------------------------------------------------------------------------
// [JIRA-ID]: ATOS-267
// [Comment]: Update for comply the coding guideline
// (21485 2014-10-08 05:38:44Z HenryTso)
// ----------------------------------------------------------------------------
// [JIRA-ID]: ATOS-267
// [Comment]: Comply coding guideline - Fix rule R17, R88, R100, R102, etc.
// (R20549 2015-10-01 09:41:00 DWYang)
// ----------------------------------------------------------------------------
// ¦s¨ú³Q©Ú¡C
