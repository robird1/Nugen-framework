package com.accu_chek.solo_m.rcapp.data.nugendata;

import java.util.ArrayList;

import android.content.ContentValues;
import android.database.Cursor;
import android.net.Uri;

import com.accu_chek.solo_m.rcapp.application.safety.SafetyChannel;
import com.accu_chek.solo_m.rcapp.application.util.CommonUtils;
import com.accu_chek.solo_m.rcapp.application.util.Debug;
import com.accu_chek.solo_m.rcapp.data.operationhandler.AbstractTable;
import com.accu_chek.solo_m.rcapp.data.operationhandler.IDBData;

public class PatientRecordTimeBlockTable extends AbstractTable
{
    // Table column name. This column value will be generated automatically by
    // Android.
    public static final String COLUMN_TIME_BLOCK_ID = "time_block_id";

    // Table column name. This column value can be null when inserting.
    public static final String COLUMN_CARB_RATIO_INSULIN = "carb_ratio_insulin";

    // Table column name. This column value can be null when inserting.
    public static final String COLUMN_CARB_RATIO_CARBS = "carb_ratio_carbs";

    // Table column name. This column value can be null when inserting.
    public static final String COLUMN_INSULIN_SENSITIVITY_INSULIN = 
            "insulin_sensitivity_insulin";

    // Table column name. This column value can be null when inserting.
    public static final String COLUMN_INSULIN_SENSITIVITY_BG = "insulin_sensitivity_bg";

    // Table column name. This column value can be null when inserting.
    public static final String COLUMN_BG_LOWER_TARGET = "bg_lower_target";

    // Table column name. This column value can be null when inserting.
    public static final String COLUMN_BG_UPPER_TARGET = "bg_upper_target";

    // Table column name. This column value can be null when inserting.
    public static final String COLUMN_START_TIME = "start_time";

    // Table column name. This column value can be null when inserting.
    public static final String COLUMN_END_TIME = "end_time";

    // Table column name. This column value can be null when inserting.
    public static final String COLUMN_IS_ACTIVE = "is_active";

    // The ID of the current queried record generated by Android.
    private int mRecordId = -1;
    
    // Table column value encoded in JSON string type.
    private String mCarbRatioInsulin = EMPTY_COLUMN_VALUE;
    
    // Table column value encoded in JSON string type.
    private String mCarbRatioCarbs = EMPTY_COLUMN_VALUE;
    
    // Table column value encoded in JSON string type.
    private String mSensitivityInsulin = EMPTY_COLUMN_VALUE;

    // Table column value encoded in JSON string type.
    private String mSensitivityBg = EMPTY_COLUMN_VALUE;
    
    // Table column value encoded in JSON string type.
    private String mBgLowerTarget = EMPTY_COLUMN_VALUE;
    
    // Table column value encoded in JSON string type.
    private String mBgUpperTarget = EMPTY_COLUMN_VALUE;
    
    // Table column value encoded in JSON string type.
    private String mStartTime = EMPTY_COLUMN_VALUE;
    
    // Table column value encoded in JSON string type.
    private String mEndTime = EMPTY_COLUMN_VALUE;
    
    // Table column value encoded in JSON string type.
    private String mIsActive = EMPTY_COLUMN_VALUE;

    /**
     * Obtain column value.
     * 
     * @return Returns an object which stores the values of channel 1 and
     *         channel 2.
     *         Range: valid object
     *         Unit: SafetyChannel
     *         Scaling: 1
     * 
     * @see mRecordId: Use this global variable for storing column value.
     * 
     */
    public SafetyChannel<Integer> getRecordId()
    {
        SafetyChannel<Integer> channel = CommonUtils
                .getSafetyChannel(mRecordId);

        return channel;
    }

    /**
     * Obtain column value.
     * 
     * @return Returns an object which stores the values of channel 1 and
     *         channel 2.
     *         Range: valid object
     *         Unit: SafetyChannel
     *         Scaling: 1
     * 
     * @see mCarbRatioInsulin: Use this global variable for storing column
     *      value.
     * 
     */
    public SafetyChannel<Integer> getCarbRatioInsulin()
    {
        SafetyChannel<Integer> channel = null;

        if (!EMPTY_COLUMN_VALUE.equals(mCarbRatioInsulin))
        {
            int[] channelValue = DatabaseUtil
                    .restoreChannelIntValue(mCarbRatioInsulin);
            channel = new SafetyChannel<Integer>(channelValue[0],
                    channelValue[1]);
        }

        return channel;
    }

    /**
     * Obtain column value.
     * 
     * @return Returns an object which stores the values of channel 1 and
     *         channel 2.
     *         Range: valid object
     *         Unit: SafetyChannel
     *         Scaling: 1
     * 
     * @see mCarbRatioCarbs: Use this global variable for storing column value.
     * 
     */
    public SafetyChannel<Integer> getCarbRatioCarbs()
    {
        SafetyChannel<Integer> channel = null;

        if (!EMPTY_COLUMN_VALUE.equals(mCarbRatioCarbs))
        {
            int[] channelValue = DatabaseUtil
                    .restoreChannelIntValue(mCarbRatioCarbs);
            channel = new SafetyChannel<Integer>(channelValue[0],
                    channelValue[1]);
        }

        return channel;
    }

    /**
     * Obtain column value.
     * 
     * @return Returns an object which stores the values of channel 1 and
     *         channel 2.
     *         Range: valid object
     *         Unit: SafetyChannel
     *         Scaling: 1
     * 
     * @see mSensitivityInsulin: Use this global variable for storing column
     *      value.
     * 
     */
    public SafetyChannel<Integer> getSensitivityInsulin()
    {
        SafetyChannel<Integer> channel = null;

        if (!EMPTY_COLUMN_VALUE.equals(mSensitivityInsulin))
        {
            int[] channelValue = DatabaseUtil
                    .restoreChannelIntValue(mSensitivityInsulin);
            channel = new SafetyChannel<Integer>(channelValue[0],
                    channelValue[1]);
        }

        return channel;
    }

    /**
     * Obtain column value.
     * 
     * @return Returns an object which stores the values of channel 1 and
     *         channel 2.
     *         Range: valid object
     *         Unit: SafetyChannel
     *         Scaling: 1
     * 
     * @see mSensitivityBg: Use this global variable for storing column value.
     * 
     */
    public SafetyChannel<Integer> getSensitivityBg()
    {
        SafetyChannel<Integer> channel = null;

        if (!EMPTY_COLUMN_VALUE.equals(mSensitivityBg))
        {
            int[] channelValue = DatabaseUtil
                    .restoreChannelIntValue(mSensitivityBg);
            channel = new SafetyChannel<Integer>(channelValue[0],
                    channelValue[1]);
        }

        return channel;
    }

    /**
     * Obtain column value.
     * 
     * @return Returns an object which stores the values of channel 1 and
     *         channel 2.
     *         Range: valid object
     *         Unit: SafetyChannel
     *         Scaling: 1
     * 
     * @see mBgLowerTarget: Use this global variable for storing column value.
     * 
     */
    public SafetyChannel<Integer> getBgLowerTarget()
    {
        SafetyChannel<Integer> channel = null;

        if (!EMPTY_COLUMN_VALUE.equals(mBgLowerTarget))
        {
            int[] channelValue = DatabaseUtil
                    .restoreChannelIntValue(mBgLowerTarget);
            channel = new SafetyChannel<Integer>(channelValue[0],
                    channelValue[1]);
        }

        return channel;
    }

    /**
     * Obtain column value.
     * 
     * @return Returns an object which stores the values of channel 1 and
     *         channel 2.
     *         Range: valid object
     *         Unit: SafetyChannel
     *         Scaling: 1
     * 
     * @see mBgUpperTarget: Use this global variable for storing column value.
     * 
     */
    public SafetyChannel<Integer> getBgUpperTarget()
    {
        SafetyChannel<Integer> channel = null;

        if (!EMPTY_COLUMN_VALUE.equals(mBgUpperTarget))
        {
            int[] channelValue = DatabaseUtil
                    .restoreChannelIntValue(mBgUpperTarget);
            channel = new SafetyChannel<Integer>(channelValue[0],
                    channelValue[1]);
        }

        return channel;
    }

    /**
     * Obtain column value.
     * 
     * @return Returns an object which stores the values of channel 1 and
     *         channel 2.
     *         Range: valid object
     *         Unit: SafetyChannel
     *         Scaling: 1
     * 
     * @see mStartTime: Use this global variable for storing column value.
     * 
     */
    public SafetyChannel<Long> getStartTime()
    {
        SafetyChannel<Long> channel = null;

        if (!EMPTY_COLUMN_VALUE.equals(mStartTime))
        {
            long[] channelValue = DatabaseUtil
                    .restoreChannelLongValue(mStartTime);
            channel = new SafetyChannel<Long>(channelValue[0], channelValue[1]);
        }

        return channel;
    }

    /**
     * Obtain column value.
     * 
     * @return Returns an object which stores the values of channel 1 and
     *         channel 2.
     *         Range: valid object
     *         Unit: SafetyChannel
     *         Scaling: 1
     * 
     * @see mEndTime: Use this global variable for storing column value.
     * 
     */
    public SafetyChannel<Long> getEndTime()
    {
        SafetyChannel<Long> channel = null;

        if (!EMPTY_COLUMN_VALUE.equals(mEndTime))
        {
            long[] channelValue = DatabaseUtil
                    .restoreChannelLongValue(mEndTime);
            channel = new SafetyChannel<Long>(channelValue[0], channelValue[1]);
        }

        return channel;
    }

    /**
     * Obtain column value.
     * 
     * @return Returns an object which stores the values of channel 1 and
     *         channel 2.
     *         Range: valid object
     *         Unit: SafetyChannel
     *         Scaling: 1
     * 
     * @see mIsActive: Use this global variable for storing column value.
     * 
     */
    public SafetyChannel<Integer> getIsActive()
    {
        SafetyChannel<Integer> channel = null;

        if (!EMPTY_COLUMN_VALUE.equals(mIsActive))
        {
            int[] channelValue = DatabaseUtil.restoreChannelIntValue(mIsActive);
            channel = new SafetyChannel<Integer>(channelValue[0],
                    channelValue[1]);
        }

        return channel;
    }

    /**
     * Obtain table column values from the patient record time block data to
     * initialize the global variables for database operation
     * (the insert or update operation).
     * 
     * @param values : the values from the patient record time block data by the
     *            insert or update operation
     *            Range: valid object
     *            Unit: ContentValues
     *            Scaling: 1
     * 
     * @return None
     * 
     * @see mCarbRatioInsulin: Use this global variable for storing column
     *      value.
     * @see mCarbRatioCarbs: Use this global variable for storing column value.
     * @see mSensitivityInsulin: Use this global variable for storing column
     *      value.
     * @see mSensitivityBg: Use this global variable for storing column value.
     * @see mBgLowerTarget: Use this global variable for storing column value.
     * @see mBgUpperTarget: Use this global variable for storing column value.
     * @see mStartTime: Use this global variable for storing column value.
     * @see mEndTime: Use this global variable for storing column value.
     * @see mIsActive: Use this global variable for storing column value.
     */
    @Override
    protected void getDataFromContentValue(ContentValues values)
    {
        CommonUtils.objectCheck(values);

        mCarbRatioInsulin = DatabaseUtil.getStringValue(values,
                COLUMN_CARB_RATIO_INSULIN, mCarbRatioInsulin);
        mCarbRatioCarbs = DatabaseUtil.getStringValue(values,
                COLUMN_CARB_RATIO_CARBS, mCarbRatioCarbs);
        mSensitivityInsulin = DatabaseUtil.getStringValue(values,
                COLUMN_INSULIN_SENSITIVITY_INSULIN, mSensitivityInsulin);
        mSensitivityBg = DatabaseUtil.getStringValue(values,
                COLUMN_INSULIN_SENSITIVITY_BG, mSensitivityBg);
        mBgLowerTarget = DatabaseUtil.getStringValue(values,
                COLUMN_BG_LOWER_TARGET, mBgLowerTarget);
        mBgUpperTarget = DatabaseUtil.getStringValue(values,
                COLUMN_BG_UPPER_TARGET, mBgUpperTarget);
        mStartTime = DatabaseUtil.getStringValue(values, COLUMN_START_TIME,
                mStartTime);
        mEndTime = DatabaseUtil.getStringValue(values, COLUMN_END_TIME,
                mEndTime);
        mIsActive = DatabaseUtil.getStringValue(values, COLUMN_IS_ACTIVE,
                mIsActive);

    }

    /**
     * Generate record CRC value according to the values of record data.
     * 
     * @return the generated CRC value
     *         Range: -2^31 to (2^31)-1
     *         Unit: int
     *         Scaling: 1
     * 
     * @see mCarbRatioInsulin: Use this global variable for storing column
     *      value.
     * @see mCarbRatioCarbs: Use this global variable for storing column value.
     * @see mSensitivityInsulin: Use this global variable for storing column
     *      value.
     * @see mSensitivityBg: Use this global variable for storing column value.
     * @see mBgLowerTarget: Use this global variable for storing column value.
     * @see mBgUpperTarget: Use this global variable for storing column value.
     * @see mStartTime: Use this global variable for storing column value.
     * @see mEndTime: Use this global variable for storing column value.
     * @see mIsActive: Use this global variable for storing column value.
     */
    @Override
    public int generateCRC()
    {
        int nCRC = -1;
        ArrayList<String> list = new ArrayList<String>();

        list.add(mCarbRatioInsulin);
        list.add(mCarbRatioCarbs);
        list.add(mSensitivityInsulin);
        list.add(mSensitivityBg);
        list.add(mBgLowerTarget);
        list.add(mBgUpperTarget);
        list.add(mStartTime);
        list.add(mEndTime);
        list.add(mIsActive);

        nCRC = DatabaseUtil.generateCRC(list);
        Debug.printI("QueryCommand",
                "genCRC() in PatientRecordTimeBlockTable. nCRC: " + nCRC);

        return nCRC;
    }

    /**
     * Invoke this method to obtain the URI path of a certain table.
     * 
     * @return the URI reference of a certain table
     *         Range: valid object
     *         Unit: Uri
     *         Scaling: 1
     */
    @Override
    public Uri onUri()
    {
        return UrlType.patientRecordTimeBlockUri;
    }

    /**
     * Obtain the query record by cursor.
     * 
     * @param cursor : position to the entry of database table
     *            Range: valid object
     *            Unit: Cursor
     *            Scaling: 1
     * 
     * @return the query record
     *         Range: valid object
     *         Unit: IDBData
     *         Scaling: 1
     * 
     * @see mCarbRatioInsulin: Use this global variable for storing column
     *      value.
     * @see mCarbRatioCarbs: Use this global variable for storing column value.
     * @see mSensitivityInsulin: Use this global variable for storing column
     *      value.
     * @see mSensitivityBg: Use this global variable for storing column value.
     * @see mBgLowerTarget: Use this global variable for storing column value.
     * @see mBgUpperTarget: Use this global variable for storing column value.
     * @see mStartTime: Use this global variable for storing column value.
     * @see mEndTime: Use this global variable for storing column value.
     * @see mIsActive: Use this global variable for storing column value.
     * @see mCRC: Use this global variable for storing calculated CRC value.
     */
    @Override
    public IDBData onQueryDataFromCursor(Cursor cursor)
    {
        PatientRecordTimeBlockTable model = null;

        CommonUtils.objectCheck(cursor);

        int recordIdIndex = cursor.getColumnIndex(COLUMN_TIME_BLOCK_ID);
        int carbRatioInsulinIndex = cursor
                .getColumnIndex(COLUMN_CARB_RATIO_INSULIN);
        int carbRatioCarbsIndex = cursor
                .getColumnIndex(COLUMN_CARB_RATIO_CARBS);
        int sensitivityInsulinIndex = cursor
                .getColumnIndex(COLUMN_INSULIN_SENSITIVITY_INSULIN);
        int sensitivityBgIndex = cursor
                .getColumnIndex(COLUMN_INSULIN_SENSITIVITY_BG);
        int bgLowerTargetIndex = cursor.getColumnIndex(COLUMN_BG_LOWER_TARGET);
        int bgUpperTargetIndex = cursor.getColumnIndex(COLUMN_BG_UPPER_TARGET);
        int startTimeIndex = cursor.getColumnIndex(COLUMN_START_TIME);
        int endTimeIndex = cursor.getColumnIndex(COLUMN_END_TIME);
        int isActiveIndex = cursor.getColumnIndex(COLUMN_IS_ACTIVE);
        int crcIndex = cursor.getColumnIndex(COLUMN_CRC);

        model = new PatientRecordTimeBlockTable();

        model.mRecordId = cursor.getInt(recordIdIndex);
        model.mCarbRatioInsulin = DatabaseUtil.getStringValue(cursor,
                carbRatioInsulinIndex);
        model.mCarbRatioCarbs = DatabaseUtil.getStringValue(cursor,
                carbRatioCarbsIndex);
        model.mSensitivityInsulin = DatabaseUtil.getStringValue(cursor,
                sensitivityInsulinIndex);
        model.mSensitivityBg = DatabaseUtil.getStringValue(cursor,
                sensitivityBgIndex);
        model.mBgLowerTarget = DatabaseUtil.getStringValue(cursor,
                bgLowerTargetIndex);
        model.mBgUpperTarget = DatabaseUtil.getStringValue(cursor,
                bgUpperTargetIndex);
        model.mStartTime = DatabaseUtil.getStringValue(cursor, startTimeIndex);
        model.mEndTime = DatabaseUtil.getStringValue(cursor, endTimeIndex);
        model.mIsActive = DatabaseUtil.getStringValue(cursor, isActiveIndex);
        model.setCRC(DatabaseUtil.getIntValue(cursor, crcIndex));

        return model;
    }

    /**
     * Obtain the primary key name of a certain table for the update operation.
     * 
     * @return the primary key name of a certain table
     *         Range: valid object
     *         Unit: String
     *         Scaling: 1
     */
    @Override
    public String getPrimaryKeyName()
    {
        return PatientRecordTimeBlockTable.COLUMN_TIME_BLOCK_ID;
    }

    /**
     * Obtain the name of a certain table for the database operation.
     * 
     * @return the name of a certain table
     *         Range: valid object
     *         Unit: String
     *         Scaling: 1
     */
    @Override
    protected String getTableName()
    {
        return DBHelper.PATIENT_RECORD_TIME_BLOCK_TABLE;
    }
}
