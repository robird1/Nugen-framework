/**
 * ===========================================================================
 * Copyright 2013 Roche Diagnostics GmbH
 * All Rights Reserved
 * ===========================================================================
 *
 * Class name: com.accu_chek.cgmapp.application.safety.SafetyString
 * Brief: The class to keep the string data with specified crc value. when
 * getString() function called, it will return the kept string if the kept crc
 * value is equals to the generated crc value by kept string. If the crc values
 * not equal, it will throw DataIntegrityException.
 *
 * Create Date: 1/6/2014
 * $Revision: 24204 $
 * $Author: StanleySu $
 * $Id: SafetyString.java 24204 2015-11-16 10:25:13Z StanleySu $
 */

package com.accu_chek.solo_m.rcapp.application.safety;

import android.os.Parcel;
import android.os.Parcelable;

import com.accu_chek.solo_m.rcapp.application.exception.DataIntegrityException;

import java.io.Serializable;

public class SafetyString implements Serializable, Parcelable,
        ISafetyEquals<String, Integer>
{
    
    public static final Creator<SafetyString> CREATOR = new Parcelable.Creator<SafetyString>() 
    {
        /**
        * Read the serialized concrete strategy from the parcel.
        * @param in The parcel to read from
        * @return An SafetyString
        */
        public SafetyString createFromParcel(final Parcel in) 
        {
            // Read serialized concrete strategy from parcel
            return (SafetyString) in.readSerializable();
        }
    
        /**
         * Required by Creator
         */
        public SafetyString[] newArray(final int size) 
        {
            return new SafetyString[size];
        }
    }; 
    
    // serial version id
    private static final long serialVersionUID = 8849589263525987226L;

    // string value in safe state
    private String mString = "";

    // crc value in safe state
    private int mCRC = CRCTool.generateCRC16(mString.getBytes());

    /**
     * Constructs a new SafetyString with default empty string ("") and generate
     * crc by empty string.
     */
    public SafetyString()
    {
        // Do nothing for the no argument constructor
    }

    /**
     * Constructs a new SafetyString with specify string and crc value. It will
     * call set() function to set the string and crc value
     * 
     * @param string [in] specify string
     * @param nCRC [in] specify crc
     */
    public SafetyString(final String string, final int nCRC)
    {
        set(string, nCRC);
    }

    /**
     * Return the kept string value if the generated crc from the string is same
     * as kept crc. Otherwise throw DataIntegrityException.
     * 
     * @return String [out] return the kept string value if the kept crc value
     *         is equals to the crc that generated by kept string. It will throw
     *         DataIntegrityException if the crc values not equals.
     */
    public final String getString()
    {
        final String result = mString;
        final SafetyBoolean isEquals = safetyEquals(result, mCRC);

        if (SafetyBoolean.FALSE.getByte() == isEquals.getByte())
        {
            throw new DataIntegrityException();
        }

        return result;
    }

    /**
     * Return the kept crc value if the generated crc from the string is same
     * as kept crc. Otherwise throw DataIntegrityException.
     * 
     * @return int [out] Return the kept crc value
     */
    public final int getCRC()
    {
        final int nCRC = mCRC;
        final SafetyBoolean isEquals = safetyEquals(mString, nCRC);

        if (SafetyBoolean.FALSE.getByte() == isEquals.getByte())
        {
            throw new DataIntegrityException();
        }

        return nCRC;
    }

    /**
     * Set the kept string value and crc value. It will throw
     * DataIntegrityException if the crc not equals to the crc that generated by
     * the string.
     * 
     * @param string [in] the string value to kept.
     * @param nCRC [in] the crc value to kept.
     * @return void [out]
     */
    public final void set(final String string, final int nCRC)
    {
        mString = string;
        mCRC = nCRC;

        // check data integrity
        final SafetyBoolean isEquals = safetyEquals(string, nCRC);
        
        if (SafetyBoolean.FALSE.getByte() == isEquals.getByte())
        {
            throw new DataIntegrityException();
        }
    }

    /**
     * Return true if the kept crc value is equals to the crc that generated by
     * the kept string. Otherwise return false.
     * 
     * @param string [in] the kept string value that to generate crc value
     * @param crc [in] the kept crc value
     * @return SafetyBoolean [out] Return true if the kept crc value is equals
     *         to the crc that generated by the kept string. Otherwise return
     *         false.
     */
    @Override
    public final SafetyBoolean safetyEquals(final String string, final Integer crc)
    {
        SafetyBoolean isResultOK = SafetyBoolean.FALSE;

        if (string != null)
        {
            final int nCRCCheck = CRCTool.generateCRC16(string.getBytes());

            if (crc == nCRCCheck)
            {
                isResultOK = SafetyBoolean.TRUE;
            }
        }

        return isResultOK;
    }

    /**
     * "It is used for for some validation code -- in particular to implement Bundle.hasFileDescriptors()"
     * (Dianne Hackborn -- Android framework engineer)
     * Not implemented in SoloM_RCAPP.
     */  
    @Override
    public final int describeContents()
    {
        // TODO Auto-generated method stub
        return 0;
    }

    /**
     * Flatten this object in to a Parcel.
     * 
     * @param dest The Parcel in which the object should be written.
     * @param flags Additional flags about how the object should be written. May
     *            be 0 or PARCELABLE_WRITE_RETURN_VALUE.
     */  
    @Override
    public final void writeToParcel(final Parcel dest, final int flags)
    {
        dest.writeSerializable(this);
        
    }
}

/*
 * ===========================================================================
 * 
 * Revision history
 * 
 * ===========================================================================
 */
// add comments
// (3338 2014-01-06 06:57:09Z PhoenixCheng)
// ----------------------------------------------------------------------------
// Restore the sources to revision 3682.
// (3700 2014-01-22 08:38:45Z HenryTso)
// ----------------------------------------------------------------------------
// [JIRA-ID]: ATOS-267
// [Comment]: comply coding guideline
// (5609 2014-03-10 02:08:06Z PhoenixCheng)
// ----------------------------------------------------------------------------
// [JIRA-ID]: ATOS-267, ATOS-272
// [Comment]: comply coding guideline and add comments
// (10075 2014-05-23 09:40:40Z PhoenixCheng)
// ----------------------------------------------------------------------------
// [JIRA-ID]: ATOS-267
// [Comment]: comply coding guideline
// (10129 2014-05-26 06:02:47Z PhoenixCheng)
// ----------------------------------------------------------------------------
// [JIRA-ID]:ATOS-267
// [Comment]:coding guideline
// (18669 2014-09-11 06:37:42Z SteveSu)
// ----------------------------------------------------------------------------
// [JIRA-ID]:ATOS-267
// [Comment]:coding guideline
// (18713 2014-09-11 08:29:36Z SteveSu)
// ----------------------------------------------------------------------------
// [JIRA-ID]: N/A
// [Comment]: Undone KEYWORD function of SVN. No Source code content will be
// changed
// (18713 2014-09-11 08:29:36Z SteveSu)
// ----------------------------------------------------------------------------
// [JIRA-ID]: N/A
// [Comment]: Preform KEYWORD function of SVN for each source files. No Source
// code content will be changed
// (21021 2014-10-03 02:34:45Z HenryTso)
// ----------------------------------------------------------------------------
// [JIRA-ID]: ATOS-267
// [Comment]: Comply coding guideline
// (21467 2014-10-07 14:22:36Z HenryTso)
// ----------------------------------------------------------------------------
// [JIRA-ID]: ATOS-267
// [Comment]: Comply coding guideline - Fix rule R17, R88, R100, R102, etc.
// (R20549 2015-10-01 09:41:00 DWYang)
// ----------------------------------------------------------------------------
// ¦s¨ú³Q©Ú¡C
