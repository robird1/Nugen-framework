/**
 * ===========================================================================
 * Copyright 2013 Roche Diagnostics GmbH
 * All Rights Reserved
 * ===========================================================================
 *
 * Class name: SafetyByteArray
 * Brief:
 *
 * Create Date: 11/13/2015
 * $Revision: 24190 $
 * $Author: StanleySu $
 * $Id: SafetyByteArray.java 24190 2015-11-16 09:54:44Z StanleySu $
 */

package com.accu_chek.solo_m.rcapp.application.safety;

import android.os.Parcel;
import android.os.Parcelable;

import com.accu_chek.solo_m.rcapp.application.exception.DataIntegrityException;

import java.io.Serializable;

public class SafetyByteArray implements Serializable, Parcelable, ISafetyEquals<byte[], Integer> 
{

    public static final Creator<SafetyByteArray> CREATOR = new Parcelable.Creator<SafetyByteArray>() 
    {
        /**
         * Read the serialized concrete strategy from the parcel.
         * @param in The parcel to read from
         * @return An SafetyByteArray
        */
        public SafetyByteArray createFromParcel(final Parcel in) 
        {
            // Read serialized concrete strategy from parcel
            return (SafetyByteArray) in.readSerializable();
        }
	
        /**
         * Required by Creator
         */
        public SafetyByteArray[] newArray(final int size) 
        {
            return new SafetyByteArray[size];
        }
    };
	
    // serial version id
    // This ID is generated by Android. DON't change to upper case
    private static final long serialVersionUID = 456643891702154455L;

    // the byte array data with CRC data
    private byte[] mData = null;
	
	// crc value in safe state
    private int mCRC = -1;
	
    /**
     * The default constructors. The variable that initialed by this
     * constructors must call set() function before call get function.
     */
    public SafetyByteArray()
    {
        // Do nothing for the no argument constructor
    }
	
    /**
     * Constructs a new SafetyByteArray with byte array data and CRC data.
     * It will call set function to set the original value and
     * diverse value.
     * 
     * @param datas [in] the byte array data
     * @param nCRC [in] the CRC data 
     */
    public SafetyByteArray(final byte[] datas, final int nCRC)
    {
        set(datas, nCRC);
    }

    /**
     * Set the byte array data and CRC data and check the integrity of
     * byte array data by safetyEquals() function. Throw DataIntegrityException if
     * check result of safetyEquals() is SafetyBoolean.FALSE.
     * 
     * @param datas [in] the byte array data
     * @param nCRC [in] the CRC data
     * @return void [out]
     */
    public final void set(final byte[] datas, final int nCRC)
    {
        mData = datas;
        mCRC = nCRC;

        final SafetyBoolean isEquals = safetyEquals(mData, mCRC);

        if (SafetyBoolean.FALSE.getByte() == isEquals.getByte())
        {
            throw new DataIntegrityException();
        }
    }
	
    /**
     * Return the byte array data without the safety comparison.
     * 
     * @return byte[] [out] the byte array data
     */
    public final byte[] getByteArray()
    {
        final byte[] resultArray = mData;
	        
        final SafetyBoolean isEquals = safetyEquals(mData, mCRC);

        if (SafetyBoolean.FALSE.getByte() == isEquals.getByte())
        {
            throw new DataIntegrityException();
        }

        return resultArray;
    }
	
    /**
     * Return the CRC data without the safety comparison.
     * 
     * @return int [out] the CRC data
     */
    public final int getCRC()
    {
        final int nCRC = mCRC;
	        
        final SafetyBoolean isEquals = safetyEquals(mData, nCRC);

        if (SafetyBoolean.FALSE.getByte() == isEquals.getByte())
        {
            throw new DataIntegrityException();
        }

        return nCRC;
    }

    /**
     * Return SafetyBoolean.TRUE if the CRC generated byte array data is equals to the
     * inputed CRC data. Otherwise return SafetyBoolean.FALSE.
     * 
     * @param data [in] the byte array data
     * @param crc [in] the CRC data
     * @return SafetyBoolean [out] true if the CRC generated by array data is equals
     *         to the inputed CRC data.
     */
    @Override
    public final SafetyBoolean safetyEquals(final byte[] data, final Integer crc) 
    {
        SafetyBoolean isResultOK = SafetyBoolean.FALSE;

        if (data != null)
        {
            final int nCRCCheck = CRCTool.generateCRC16(data);

            if (crc == nCRCCheck)
            {
                isResultOK = SafetyBoolean.TRUE;
            }
        }

        return isResultOK;
    }

    /**
     * "It is used for for some validation code -- in particular to implement Bundle.hasFileDescriptors()"
     * (Dianne Hackborn -- Android framework engineer)
     * Not implemented in SoloM_RCAPP.
     */  
    @Override
    public final int describeContents()
    {
        return 0;
    }

    /**
     * Flatten this object in to a Parcel.
     * 
     * @param dest The Parcel in which the object should be written.
     * @param flags Additional flags about how the object should be written. May
     *            be 0 or PARCELABLE_WRITE_RETURN_VALUE.
     */
    @Override
    public final void writeToParcel(final Parcel dest, final int flags)
    {
        dest.writeSerializable(this);
    }
}

/*
 * ===========================================================================
 *
 * Revision history
 *  
 * ===========================================================================
 */
