package com.accu_chek.solo_m.rcapp.data.nugendata;

import java.util.ArrayList;

import android.content.ContentValues;
import android.database.Cursor;
import android.net.Uri;

import com.accu_chek.solo_m.rcapp.application.safety.SafetyChannel;
import com.accu_chek.solo_m.rcapp.application.util.CommonUtils;
import com.accu_chek.solo_m.rcapp.application.util.Debug;
import com.accu_chek.solo_m.rcapp.data.operationhandler.AbstractTable;
import com.accu_chek.solo_m.rcapp.data.operationhandler.IDBData;

public class UserSettingTable extends AbstractTable
{
    // Table column name. This column value will be generated automatically by
    // Android.
    public static final String COLUMN_USER_SETTING_ID = "user_setting_id";
    
    // Table column name. This column value must not be null when inserting or
    // an SQLiteException will occur.
    public static final String COLUMN_SNACK_SIZE = "snack_size";
    
    // Table column name. This column value must not be null when inserting or
    // an SQLiteException will occur.
    public static final String COLUMN_MEAL_RISE= "meal_rise";
    
    // Table column name. This column value must not be null when inserting or
    // an SQLiteException will occur.
    public static final String COLUMN_ACTING_TIME= "acting_time";
    
    // Table column name. This column value must not be null when inserting or
    // an SQLiteException will occur.
    public static final String COLUMN_OFFSET_TIME= "offset_time";
    
    // The ID of the current queried record generated by Android.
    private int mRecordId = -1;
    
    // Table column value encoded in JSON string type.
    private String mSnackSize = EMPTY_COLUMN_VALUE;
    
    // Table column value encoded in JSON string type.
    private String mMealRise = EMPTY_COLUMN_VALUE;
    
    // Table column value encoded in JSON string type.
    private String mActingtime = EMPTY_COLUMN_VALUE;
    
    // Table column value encoded in JSON string type.
    private String mOffsetTime = EMPTY_COLUMN_VALUE;
    
    /**
     * Obtain column value.
     * 
     * @return Returns an object which stores the values of channel 1 and
     *         channel 2.
     *         Range: valid object
     *         Unit: SafetyChannel
     *         Scaling: 1
     * 
     * @see mRecordId: Use this global variable for storing column value.
     * 
     */
    public SafetyChannel<Integer> getRecordId()
    {
        SafetyChannel<Integer> channel = CommonUtils
                .getSafetyChannel(mRecordId);
        
        return channel;
    }

    /**
     * Obtain column value.
     * 
     * @return Returns an object which stores the values of channel 1 and
     *         channel 2.
     *         Range: valid object
     *         Unit: SafetyChannel
     *         Scaling: 1
     * 
     * @see mSnackSize: Use this global variable for storing column value.
     * 
     */
    public SafetyChannel<Integer> getSnackSize()
    {
        SafetyChannel<Integer> channel = null;

        if (!EMPTY_COLUMN_VALUE.equals(mSnackSize))
        {
            int[] channelValue = DatabaseUtil
                    .restoreChannelIntValue(mSnackSize);
            channel = new SafetyChannel<Integer>(channelValue[0],
                    channelValue[1]);
        }
        
        return channel;
    }
    
    /**
     * Obtain column value.
     * 
     * @return Returns an object which stores the values of channel 1 and
     *         channel 2.
     *         Range: valid object
     *         Unit: SafetyChannel
     *         Scaling: 1
     * 
     * @see mMealRise: Use this global variable for storing column value.
     * 
     */
    public SafetyChannel<Integer> getMealRise()
    {
        SafetyChannel<Integer> channel = null;

        if (!EMPTY_COLUMN_VALUE.equals(mMealRise))
        {
            int[] channelValue = DatabaseUtil.restoreChannelIntValue(mMealRise);
            channel = new SafetyChannel<Integer>(channelValue[0],
                    channelValue[1]);
        }

        return channel;
    }

    /**
     * Obtain column value.
     * 
     * @return Returns an object which stores the values of channel 1 and
     *         channel 2.
     *         Range: valid object
     *         Unit: SafetyChannel
     *         Scaling: 1
     * 
     * @see mActingtime: Use this global variable for storing column value.
     * 
     */
    public SafetyChannel<Integer> getActingtime()
    {
        SafetyChannel<Integer> channel = null;

        if (!EMPTY_COLUMN_VALUE.equals(mActingtime))
        {
            int[] channelValue = DatabaseUtil
                    .restoreChannelIntValue(mActingtime);
            channel = new SafetyChannel<Integer>(channelValue[0],
                    channelValue[1]);
        }

        return channel;
    }

    /**
     * Obtain column value.
     * 
     * @return Returns an object which stores the values of channel 1 and
     *         channel 2.
     *         Range: valid object
     *         Unit: SafetyChannel
     *         Scaling: 1
     * 
     * @see mOffsetTime: Use this global variable for storing column value.
     * 
     */
    public SafetyChannel<Integer> getOffsetTime()
    {
        SafetyChannel<Integer> channel = null;

        if (!EMPTY_COLUMN_VALUE.equals(mOffsetTime))
        {
            int[] channelValue = DatabaseUtil
                    .restoreChannelIntValue(mOffsetTime);
            channel = new SafetyChannel<Integer>(channelValue[0], channelValue[1]);
        }

        return channel;
    }

    /**
     * Obtain table column values from the user setting data to initialize the
     * global variables for database operation (the insert or update operation).
     * 
     * @param values : the values from the user setting data by the insert or
     *            update operation
     *            Range: valid object
     *            Unit: ContentValues
     *            Scaling: 1
     * 
     * @return None
     * 
     * @see mSnackSize: Use this global variable for storing column value.
     * @see mMealRise: Use this global variable for storing column value.
     * @see mActingtime: Use this global variable for storing column value.
     * @see mOffsetTime: Use this global variable for storing column value.
     */
    @Override
    protected void getDataFromContentValue(ContentValues values)
    {
        CommonUtils.objectCheck(values);

        mSnackSize = DatabaseUtil.getStringValue(values, COLUMN_SNACK_SIZE,
                mSnackSize);
        mMealRise = DatabaseUtil.getStringValue(values, COLUMN_MEAL_RISE,
                mMealRise);
        mActingtime = DatabaseUtil.getStringValue(values, COLUMN_ACTING_TIME,
                mActingtime);
        mOffsetTime = DatabaseUtil.getStringValue(values, COLUMN_OFFSET_TIME,
                mOffsetTime);

    }

    /**
     * Generate record CRC value according to the values of record data.
     * 
     * @return the generated CRC value
     *            Range: -2^31 to (2^31)-1
     *            Unit: int
     *            Scaling: 1
     * 
     * @see mSnackSize: Use this global variable for storing column value.
     * @see mMealRise: Use this global variable for storing column value.
     * @see mActingtime: Use this global variable for storing column value.
     * @see mOffsetTime: Use this global variable for storing column value.
     */
    @Override
    public int generateCRC()
    {
        int nCRC = -1;
        ArrayList<String> list = new ArrayList<String>();
        
        list.add(mSnackSize);
        list.add(mMealRise);
        list.add(mActingtime);
        list.add(mOffsetTime);

        nCRC = DatabaseUtil.generateCRC(list);
        Debug.printI("QueryCommand", "genCRC() in UserSettingTable. nCRC: "
                + nCRC);

        return nCRC;
    }

    /**
     * Invoke this method to obtain the URI path of a certain table.
     * 
     * @return the URI reference of a certain table
     *            Range: valid object
     *            Unit: Uri
     *            Scaling: 1
     */
    @Override
    public Uri onUri()
    {
        return UrlType.userSettingUri;
    }

    /**
     * Obtain the query record by cursor.
     * 
     * @param cursor : position to the entry of database table
     *            Range: valid object
     *            Unit: Cursor
     *            Scaling: 1
     * 
     * @return the query record
     *         Range: valid object
     *         Unit: IDBData
     *         Scaling: 1
     * 
     * @see mSnackSize: Use this global variable for storing column value.
     * @see mMealRise: Use this global variable for storing column value.
     * @see mActingtime: Use this global variable for storing column value.
     * @see mOffsetTime: Use this global variable for storing column value.
     * @see mCRC: Use this global variable for storing calculated CRC value.
     */
    @Override
    public IDBData onQueryDataFromCursor(Cursor cursor)
    {
        UserSettingTable model = null;
        
        CommonUtils.objectCheck(cursor);
        
        int recordIdIndex = cursor.getColumnIndex(COLUMN_USER_SETTING_ID);
        int snackSizeIndex = cursor.getColumnIndex(COLUMN_SNACK_SIZE);
        int mealRiseIndex = cursor.getColumnIndex(COLUMN_MEAL_RISE);
        int actingTimeIndex = cursor.getColumnIndex(COLUMN_ACTING_TIME);
        int offsetTimeIndex = cursor.getColumnIndex(COLUMN_OFFSET_TIME);
        int crcIndex = cursor.getColumnIndex(COLUMN_CRC);

        model = new UserSettingTable();
        
        model.mRecordId = cursor.getInt(recordIdIndex);
        model.mSnackSize = DatabaseUtil.getStringValue(cursor, snackSizeIndex);
        model.mMealRise = DatabaseUtil.getStringValue(cursor, mealRiseIndex);
        model.mActingtime = DatabaseUtil
                .getStringValue(cursor, actingTimeIndex);
        model.mOffsetTime = DatabaseUtil
                .getStringValue(cursor, offsetTimeIndex);
        model.setCRC(DatabaseUtil.getIntValue(cursor, crcIndex));
        
        return model;

    }

    /**
     * Obtain the primary key name of a certain table for the update operation.
     * 
     * @return the primary key name of a certain table
     *         Range: valid object
     *         Unit: String
     *         Scaling: 1
     */
    public String getPrimaryKeyName()
    {
        return UserSettingTable.COLUMN_USER_SETTING_ID;
    }

    /**
     * Obtain the name of a certain table for the database operation.
     * 
     * @return the name of a certain table
     *         Range: valid object
     *         Unit: String
     *         Scaling: 1
     */
    @Override
    protected String getTableName()
    {
        return DBHelper.USER_SETTING_TABLE;
    }
    
}
